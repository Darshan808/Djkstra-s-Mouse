//Creates a node with default property

export let details = {
  START_NODE_ROW: 10,
  START_NODE_COL: 15,
  FINISH_NODE_ROW: 10,
  FINISH_NODE_COL: 35,
};

export function getMazeWall_1() {
  const walls = [
    { row: 16, column: 0 },
    { row: 16, column: 1 },
    { row: 16, column: 2 },
    { row: 16, column: 3 },
    { row: 16, column: 4 },
    { row: 16, column: 5 },
    { row: 16, column: 6 },
    { row: 16, column: 7 },
    { row: 11, column: 0 },
    { row: 11, column: 1 },
    { row: 11, column: 2 },
    { row: 11, column: 3 },
    { row: 11, column: 4 },
    { row: 11, column: 5 },
    { row: 11, column: 6 },
    { row: 11, column: 7 },
    { row: 7, column: 5 },
    { row: 7, column: 6 },
    { row: 7, column: 7 },
    { row: 7, column: 8 },
    { row: 7, column: 9 },
    { row: 7, column: 10 },
    { row: 7, column: 11 },
    { row: 8, column: 11 },
    { row: 9, column: 11 },
    { row: 10, column: 11 },
    { row: 11, column: 11 },
    { row: 12, column: 11 },
    { row: 13, column: 11 },
    { row: 13, column: 10 },
    { row: 13, column: 9 },
    { row: 13, column: 8 },
    { row: 13, column: 7 },
    { row: 13, column: 6 },
    { row: 13, column: 5 },
    { row: 13, column: 4 },
    { row: 13, column: 3 },
    { row: 7, column: 12 },
    { row: 7, column: 13 },
    { row: 7, column: 14 },
    { row: 7, column: 15 },
    { row: 7, column: 16 },
    { row: 7, column: 17 },
    { row: 7, column: 18 },
    { row: 7, column: 19 },
    { row: 7, column: 20 },
    { row: 7, column: 21 },
    { row: 6, column: 16 },
    { row: 5, column: 16 },
    { row: 4, column: 16 },
    { row: 3, column: 16 },
    { row: 2, column: 16 },
    { row: 1, column: 16 },
    { row: 7, column: 22 },
    { row: 7, column: 23 },
    { row: 7, column: 24 },
    { row: 8, column: 24 },
    { row: 9, column: 24 },
    { row: 10, column: 24 },
    { row: 11, column: 24 },
    { row: 12, column: 24 },
    { row: 13, column: 24 },
    { row: 11, column: 18 },
    { row: 12, column: 18 },
    { row: 13, column: 18 },
    { row: 14, column: 18 },
    { row: 15, column: 18 },
    { row: 16, column: 18 },
    { row: 17, column: 18 },
    { row: 18, column: 18 },
    { row: 19, column: 18 },
    { row: 17, column: 18 },
    { row: 7, column: 31 },
    { row: 8, column: 31 },
    { row: 9, column: 31 },
    { row: 10, column: 31 },
    { row: 11, column: 31 },
    { row: 12, column: 31 },
    { row: 13, column: 31 },
    { row: 14, column: 31 },
    { row: 15, column: 31 },
    { row: 16, column: 31 },
    { row: 17, column: 31 },
    { row: 18, column: 31 },
    { row: 19, column: 31 },
    { row: 13, column: 32 },
    { row: 13, column: 33 },
    { row: 13, column: 34 },
    { row: 13, column: 35 },
    { row: 13, column: 36 },
    { row: 13, column: 37 },
    { row: 13, column: 38 },
    { row: 13, column: 39 },
    { row: 13, column: 40 },
    { row: 8, column: 42 },
    { row: 8, column: 43 },
    { row: 8, column: 44 },
    { row: 8, column: 45 },
    { row: 8, column: 46 },
    { row: 8, column: 47 },
    { row: 8, column: 48 },
    { row: 8, column: 49 },
    { row: 16, column: 42 },
    { row: 16, column: 43 },
    { row: 16, column: 44 },
    { row: 16, column: 45 },
    { row: 16, column: 46 },
    { row: 16, column: 47 },
    { row: 16, column: 48 },
    { row: 16, column: 49 },
    { row: 0, column: 35 },
    { row: 1, column: 35 },
    { row: 2, column: 35 },
    { row: 3, column: 35 },
    { row: 4, column: 35 },
    { row: 5, column: 35 },
    { row: 6, column: 35 },
    { row: 7, column: 35 },
    { row: 7, column: 36 },
    { row: 7, column: 37 },
    { row: 7, column: 38 },
    { row: 7, column: 39 },
    { row: 6, column: 39 },
    { row: 5, column: 39 },
    { row: 4, column: 39 },
    { row: 3, column: 39 },
    { row: 5, column: 40 },
    { row: 5, column: 41 },
    { row: 5, column: 42 },
    { row: 2, column: 49 },
    { row: 2, column: 48 },
    { row: 2, column: 47 },
    { row: 2, column: 46 },
    { row: 2, column: 45 },
    { row: 2, column: 43 },
    { row: 2, column: 44 },
    { row: 0, column: 6 },
    { row: 1, column: 6 },
    { row: 2, column: 6 },
    { row: 3, column: 6 },
    { row: 4, column: 6 },
    { row: 0, column: 22 },
    { row: 1, column: 22 },
    { row: 2, column: 22 },
    { row: 2, column: 23 },
    { row: 2, column: 24 },
    { row: 2, column: 25 },
    { row: 2, column: 26 },
    { row: 2, column: 27 },
    { row: 2, column: 28 },
    { row: 2, column: 29 },
    { row: 2, column: 30 },
    { row: 2, column: 31 },
    { row: 2, column: 32 },
    { row: 1, column: 32 },
    { row: 0, column: 32 },
    { row: 3, column: 28 },
    { row: 4, column: 28 },
    { row: 5, column: 28 },
    { row: 6, column: 28 },
    { row: 7, column: 28 },
  ];

  return walls;
}

const createNode = (col, row) => {
  return {
    col,
    row,
    isStart: row === details.START_NODE_ROW && col === details.START_NODE_COL,
    isFinish:
      row === details.FINISH_NODE_ROW && col === details.FINISH_NODE_COL,
    distance: Infinity,
    isVisited: false,
    isWall: false,
    previousNode: null,
    isRat: row === details.START_NODE_ROW && col === details.START_NODE_COL,
  };
};

//Creates initial empty grid
export const getInitialGrid = () => {
  const initGrid = [];
  for (let row = 0; row < 20; row++) {
    const currentRow = [];
    for (let col = 0; col < 50; col++) {
      currentRow.push(createNode(col, row));
    }
    initGrid.push(currentRow);
  }
  return initGrid;
};

//Returns new Grid with walls toggled
export const getNewGridWithWallToggled = (grid, row, col) => {
  const newGrid = grid.slice();
  const node = newGrid[row][col];
  const newNode = {
    ...node,
    isWall: !node.isWall,
  };
  newGrid[row][col] = newNode;
  return newGrid;
};
